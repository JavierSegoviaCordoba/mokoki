{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Redundant assignment",
  "severity": "High",
  "comment": "Variable 'serializersModule' is assigned to itself",
  "detailsInfo": "Reports assignments of a variable to itself.\n\nThe quick-fix removes the redundant assignment.\n\n**Example:**\n\n\n      fun test() {\n          var bar = 1\n          bar = bar\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun test() {\n          var bar = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-serialization/commonMain/kotlin/com/javiersc/mokoki/serialization/MokokiSerialization.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 33,
      "length": 42,
      "code": {
        "startLine": 31,
        "length": 42,
        "offset": 86,
        "surroundingCode": "        get() = Json {\n            prettyPrint = true\n            serializersModule = this@MokokiSerialization.serializersModule\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-serialization.commonMain",
    "inspectionName": "SelfAssignment"
  },
  "hash": "cd0b6aaa2c9dba6b85495771eb675d874d974d9fa4c2fb61f58023e6dfd5238d"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 31,
      "length": 2,
      "code": {
        "startLine": 4,
        "length": 2,
        "offset": 60,
        "surroundingCode": "\ninternal actual val fileName\n    get() = \"file ${stackTrace?.fileName ?: \"Unknown\"}\"\n\ninternal actual val className"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "e4f437cc3295d617d18777a644c951425431bedc9c8b53b2796581e5ebd757ba"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 32,
      "length": 2,
      "code": {
        "startLine": 7,
        "length": 2,
        "offset": 62,
        "surroundingCode": "\ninternal actual val className\n    get() = \"class ${stackTrace?.className?.split(\".\")?.lastOrNull() ?: \"Unknown\"}\"\n\ninternal actual val methodName"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "818f3aef26c465bfac83d994fb5a4d050d9c68affab0dc137099be80c760a680"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : \\]",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 43,
      "length": 2,
      "code": {
        "startLine": 7,
        "length": 2,
        "offset": 73,
        "surroundingCode": "\ninternal actual val className\n    get() = \"class ${stackTrace?.className?.split(\".\")?.lastOrNull() ?: \"Unknown\"}\"\n\ninternal actual val methodName"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "373725adad8266e2d7defcabf9af0c2feca4113de78c5b41f604410c45709315"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : \\]",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 55,
      "length": 2,
      "code": {
        "startLine": 7,
        "length": 2,
        "offset": 85,
        "surroundingCode": "\ninternal actual val className\n    get() = \"class ${stackTrace?.className?.split(\".\")?.lastOrNull() ?: \"Unknown\"}\"\n\ninternal actual val methodName"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "9272082d97ca89d2625f37e5ccc4d750615c18a74f1f5877da54eab4693c07de"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 30,
      "length": 2,
      "code": {
        "startLine": 10,
        "length": 2,
        "offset": 61,
        "surroundingCode": "\ninternal actual val methodName\n    get() = \"fun ${stackTrace?.methodName ?: \"Unknown\"}\"\n\ninternal actual val lineNumber"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "30fff4ce882c2f5d9d94655529d00cd56eda9fa7117d3518bbcc32fb55447826"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 31,
      "length": 2,
      "code": {
        "startLine": 13,
        "length": 2,
        "offset": 62,
        "surroundingCode": "\ninternal actual val lineNumber\n    get() = \"line ${stackTrace?.lineNumber ?: \"Unknown\"}\"\n\ninternal actual val fileLink"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "f4f77ef4b321e66e2eb12ea0326bb74c1db8a4a22b48ff15597e430df190a85d"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 27,
      "length": 2,
      "code": {
        "startLine": 16,
        "length": 2,
        "offset": 56,
        "surroundingCode": "\ninternal actual val fileLink\n    get() = \"(${stackTrace?.fileName}:${stackTrace?.lineNumber})\"\n\n@Suppress(\"TooGenericExceptionCaught\")"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "b979b922d84c67ab47c8349382555019b3b3d72712a165739278c85b578cb144"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : StackTraceElement\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/LoggerNames.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 16,
        "length": 2,
        "offset": 80,
        "surroundingCode": "\ninternal actual val fileLink\n    get() = \"(${stackTrace?.fileName}:${stackTrace?.lineNumber})\"\n\n@Suppress(\"TooGenericExceptionCaught\")"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "d68525349b9a07e8973386f2d3bcca597b4ce609f4764d0d48c978b8a4c079e7"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary safe call on a non-null receiver of type \\[ERROR : Handler\\]?",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/kotlin/com/javiersc/mokoki/internal/AndroidLoggingHandler.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 24,
      "length": 2,
      "code": {
        "startLine": 38,
        "length": 2,
        "offset": 87,
        "surroundingCode": "                rootLogger.removeHandler(handler)\n            }\n            rootHandler?.let(rootLogger::addHandler)\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "d799d653de6441917222f4b02cf6792d1ce65c41a7f5e020dc063ce49b0d4838"
},{
  "tool": "Code Inspection",
  "category": "Android",
  "type": "Android Resources Validation",
  "severity": "Critical",
  "comment": "Unresolved class 'MainActivity'",
  "detailsInfo": "Validates resource references inside Android XML files.",
  "sources": [
    {
      "type": "file",
      "path": "samples/android/android-core/src/main/AndroidManifest.xml",
      "language": "XML",
      "line": 12,
      "offset": 52,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 105,
        "surroundingCode": "        <activity\n            android:exported=\"true\"\n            android:name=\"com.javiersc.mokoki.core.MainActivity\"\n            android:label=\"Mokoki\">\n"
      }
    }
  ],
  "attributes": {
    "module": "mokoki",
    "inspectionName": "AndroidDomInspection"
  },
  "hash": "085ad1ee65e7a0f5b9d1b32cbc08bc0d7afc0d1a5e834761cda0ff820743ae35"
},{
  "tool": "Code Inspection",
  "category": "Android",
  "type": "Android Resources Validation",
  "severity": "Critical",
  "comment": "Unresolved package 'core'",
  "detailsInfo": "Validates resource references inside Android XML files.",
  "sources": [
    {
      "type": "file",
      "path": "samples/android/android-core/src/main/AndroidManifest.xml",
      "language": "XML",
      "line": 12,
      "offset": 47,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 100,
        "surroundingCode": "        <activity\n            android:exported=\"true\"\n            android:name=\"com.javiersc.mokoki.core.MainActivity\"\n            android:label=\"Mokoki\">\n"
      }
    }
  ],
  "attributes": {
    "module": "mokoki",
    "inspectionName": "AndroidDomInspection"
  },
  "hash": "1046147b370706ec09f5bb3e5e377dc5732ebecc709229bc8c0db1574cf7b1ce"
},{
  "tool": "Code Inspection",
  "category": "Correctness",
  "type": "Minimum SDK and target SDK attributes not defined",
  "severity": "High",
  "comment": "Manifest should specify a minimum API level with `<uses-sdk android:minSdkVersion=\"?\" />`; if it really supports all versions of Android set it to 1",
  "detailsInfo": "Minimum SDK and target SDK attributes not defined  \n\nThe manifest should contain a `<uses-sdk>` element which defines the minimum API Level required for the application to run, as well as the target version (the highest API level you have tested the version for).  \n\nIssue id: UsesMinSdkAttributes  \n\n<https://developer.android.com/guide/topics/manifest/uses-sdk-element.html>",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-core/androidMain/AndroidManifest.xml",
      "language": "XML",
      "line": 1,
      "offset": 1,
      "length": 42,
      "code": {
        "startLine": 1,
        "length": 42,
        "offset": 0,
        "surroundingCode": "<manifest package=\"com.javiersc.mokoki\"/>\n"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-core",
    "inspectionName": "AndroidLintUsesMinSdkAttributes"
  },
  "hash": "f5f3aa9968fefc5461f16d8029d78e2fa8201df9287d388483fa625ee6f412b9"
},{
  "tool": "Code Inspection",
  "category": "Java interop issues",
  "type": "Package name does not match containing directory",
  "severity": "Critical",
  "comment": "Package directive does not match the file location",
  "detailsInfo": "Reports `package` directives that do not match the location of the file.",
  "sources": [
    {
      "type": "file",
      "path": "mokoki-serialization/commonMain/kotlin/com/javiersc/mokoki/serialization/BuildMokokiSerialization.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 1,
      "length": 50,
      "code": {
        "startLine": 1,
        "length": 50,
        "offset": 46,
        "surroundingCode": "@file:OptIn(InternalSerializationApi::class)\n\npackage com.javiersc.mokoki.serialization.internal\n\nimport com.javiersc.mokoki.Mokoki"
      }
    }
  ],
  "attributes": {
    "module": "mokoki.mokoki-serialization.commonMain",
    "inspectionName": "PackageDirectoryMismatch"
  },
  "hash": "ea617070cfce11a650236644e9f5796c4f77fc7684deb322aeec132ca8dd760b"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'repositories(org.gradle.api.Action)' is declared in unstable interface 'org.gradle.api.initialization.resolve.DependencyResolutionManagement' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 8,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 6,
        "length": 12,
        "offset": 38,
        "surroundingCode": "\ndependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n        google()"
      }
    }
  ],
  "attributes": {
    "module": "mokoki",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "2ffa9f85bb6c3991fff931c812fe1a354f234eb335e5ab051e5e354a70506f24"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'versionCatalogs(org.gradle.api.Action)' is declared in unstable interface 'org.gradle.api.initialization.resolve.DependencyResolutionManagement' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "settings.gradle.kts",
      "language": "kotlin",
      "line": 14,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 12,
        "length": 15,
        "offset": 11,
        "surroundingCode": "    }\n\n    versionCatalogs {\n        create(\"libs\") { from(files(\"gradle/libs.toml\")) }\n        create(\"pluginLibs\") { from(files(\"gradle/pluginLibs.toml\")) }"
      }
    }
  ],
  "attributes": {
    "module": "mokoki",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "393b13f3ce3971fc962f5cf689e1434514e8bfcf64dc34a64a2fcd8e654b7fb6"
}]}